import { Telegraf, Context, Composer, Markup } from "telegraf";
import { message } from "telegraf/filters";
import { BOT_TOKEN } from "./env";
// import { getClient } from "./services/telegramclient";
import { NewMessage } from "telegram/events";
import { generateRandomId, getChatId } from "./utils";
import { promptYandexGpt } from "./services/yandexgpt";

export const bot = new Telegraf(BOT_TOKEN, {
  handlerTimeout: 5 * 60 * 1000,
});

// const handleError = async (context: Context) => {
//   await context.reply("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑(");
// };

bot.use(Composer.drop((context) => context.chat?.type !== "private"));

bot.start(async (context) => {
  await context.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç. –Ø - –±–∏–±–ª–µ–π—Å–∫–∏–π –ø–æ–∏—Å–∫–æ–≤–∏–∫, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–º—É –∏–∑ –±–∏–±–ª–∏–∏)"
  );
});

bot.command("chatid", async (context) => {
  await context.reply(`This chat id: ${context.chat.id}`);
});

// bot.use(async (context, next) => {
//   //   let typingInterval: ReturnType<typeof setInterval> | undefined = undefined;
//   //   try {
//   //     await context.sendChatAction("typing");
//   //     typingInterval = setInterval(async () => {
//   //       try {
//   await context.sendChatAction("typing");
//   //       } catch (error) {
//   //         clearInterval(typingInterval);
//   //       }
//   //     }, moment.duration(5, "seconds").asMilliseconds());

//   return await next();
//   //   } finally {
//   //     clearInterval(typingInterval);
//   //     // no way to clear chat action, wait 5s
//   //   }
// });

const delay = (ms: number) =>
  new Promise((resolve) => setTimeout(resolve, ms));

const BASE_SYSTEM_PROMPT =
  "–ù–∞–π–¥–∏ —Å—Ç–∏—Ö–∏ –∏–∑ –±–∏–±–ª–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–º —á—Ç–æ –±—É–¥–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ";

bot.on(message("text"), async (context) => {
  const promptText = context.message.text;
  console.log("prompt", promptText);

  const isProcessingMessage = await context.reply(
    "‚è≥ –ü—Ä–æ–º–ø—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
  );
  let promptResult: Awaited<ReturnType<typeof promptYandexGpt>>;
  try {
    promptResult = await promptYandexGpt(promptText, {
      systemPrompt: BASE_SYSTEM_PROMPT,
    });
    console.log("promptResult", promptResult);
  } finally {
    await context.deleteMessage(isProcessingMessage.message_id);
  }

  await context.reply(promptResult.alternatives?.[0].message);
});

bot.use(async (context) => {
  await context.reply(
    "‚ö†Ô∏è –í–≤–µ–¥–∏ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∏—Ö–æ–≤",
    {
      disable_notification: true,
    }
  );
});
